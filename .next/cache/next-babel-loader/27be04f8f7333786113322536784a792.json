{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guill\\\\git\\\\nextjs\\\\pages\\\\post.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport axios from \"axios\";\n\nconst Post = ({\n  id,\n  comments\n}) => __jsx(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 3\n  }\n}, __jsx(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }\n}, \"comments for post #\", id), comments.map(comment => {\n  return __jsx(Comment, _extends({}, comment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 14\n    }\n  }));\n}));\n\nconst Comment = ({\n  email,\n  body\n}) => __jsx(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 3\n  }\n}, __jsx(\"h5\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }\n}, email, \" \"), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }\n}, body));\n\nPost.getInitialProps = async ({\n  query\n}) => {\n  const res = await axios.get(\"https://jsonplaceholder.typicode.com/comments?postId=1\");\n  const {\n    data\n  } = res;\n  console.log();\n  return _objectSpread(_objectSpread({}, query), {}, {\n    comments: data\n  });\n};\n\nexport default Post; // ###################### TWO WAYS TO FETCH THE QUERY ######################\n\n/*\r\n// ########## THE FIRST ONE ############\r\n// Using getInitialProps to fetch the query\r\nconst Post = (props) => <h1>YOU ARE LOOKING AT POST #{props.id}</h1>;\r\nPost.getInitialProps = async ({ query }) => {\r\n  return query;\r\n};\r\nexport default Post;\r\n*/\n\n/*\r\n// ########## THE OTHER ONE ############\r\n// The same, using a High Order Component called withRouter to fetch the query\r\nimport { withRouter } from \"next/router\";\r\nconst Post = (props) => <h1>YOU ARE LOOKING AT POST #{props.router.query.id}</h1>;\r\nexport default withRouter(Post);\r\n*/","map":{"version":3,"sources":["C:/Users/guill/git/nextjs/pages/post.js"],"names":["axios","Post","id","comments","map","comment","Comment","email","body","getInitialProps","query","res","get","data","console","log"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,KACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAwBD,EAAxB,CADF,EAEGC,QAAQ,CAACC,GAAT,CAAcC,OAAD,IAAa;AACzB,SAAO,MAAC,OAAD,eAAaA,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAFA,CAFH,CADF;;AASA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAKD,KAAL,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAIC,IAAJ,CAFF,CADF;;AAOAP,IAAI,CAACQ,eAAL,GAAuB,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AAC1C,QAAMC,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAN,CAChB,wDADgB,CAAlB;AAGA,QAAM;AAAEC,IAAAA;AAAF,MAAWF,GAAjB;AACAG,EAAAA,OAAO,CAACC,GAAR;AACA,yCAAYL,KAAZ;AAAmBP,IAAAA,QAAQ,EAAEU;AAA7B;AACD,CAPD;;AASA,eAAeZ,IAAf,C,CAEA;;AAEA;;;;;;;;;;AAUA","sourcesContent":["import axios from \"axios\";\r\n\r\nconst Post = ({ id, comments }) => (\r\n  <div>\r\n    <h1>comments for post #{id}</h1>\r\n    {comments.map((comment) => {\r\n      return <Comment {...comment} />;\r\n    })}\r\n  </div>\r\n);\r\n\r\nconst Comment = ({ email, body }) => (\r\n  <div>\r\n    <h5>{email} </h5>\r\n    <p>{body}</p>\r\n  </div>\r\n);\r\n\r\nPost.getInitialProps = async ({ query }) => {\r\n  const res = await axios.get(\r\n    \"https://jsonplaceholder.typicode.com/comments?postId=1\"\r\n  );\r\n  const { data } = res;\r\n  console.log();\r\n  return { ...query, comments: data };\r\n};\r\n\r\nexport default Post;\r\n\r\n// ###################### TWO WAYS TO FETCH THE QUERY ######################\r\n\r\n/*\r\n// ########## THE FIRST ONE ############\r\n// Using getInitialProps to fetch the query\r\nconst Post = (props) => <h1>YOU ARE LOOKING AT POST #{props.id}</h1>;\r\nPost.getInitialProps = async ({ query }) => {\r\n  return query;\r\n};\r\nexport default Post;\r\n*/\r\n\r\n/*\r\n// ########## THE OTHER ONE ############\r\n// The same, using a High Order Component called withRouter to fetch the query\r\nimport { withRouter } from \"next/router\";\r\nconst Post = (props) => <h1>YOU ARE LOOKING AT POST #{props.router.query.id}</h1>;\r\nexport default withRouter(Post);\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}
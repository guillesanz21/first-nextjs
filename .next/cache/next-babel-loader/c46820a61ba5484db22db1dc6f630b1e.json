{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\guill\\\\git\\\\nextjs\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\n\nvar Index = /*#__PURE__*/function (_Component) {\n  _inherits(Index, _Component);\n\n  var _super = _createSuper(Index);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _super.call(this, props);\n    console.log(\"CONSTRUCTOR: Data fetching twice, from the server and from the client\");\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"COMPONENT_DID_MOUNT: Data fetching from the client only\");\n    } // If we use a functional component, then we need to defined it like this:\n    // Page.getInitialProps = async () => { ... }\n    // Both functional and class components could recieve a \"ctx\" argument (context)\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(\"**********RUNNING INDEX COMPONENT**********\");\n      return __jsx(React.Fragment, null, __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }\n      }, \"Our Index Page\"), __jsx(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }\n      }, this.props.posts.map(function (post) {\n        __jsx(\"li\", {\n          key: post.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }\n        }, \"post.title\");\n      })));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"GET_INITIAL_PROPS: Data fetching from the server in the initial page load, then from the client\");\n                _context.next = 3;\n                return axios.get(\"https://jsonplaceholder.typicode.com/posts\");\n\n              case 3:\n                res = _context.sent;\n                data = res.data;\n                return _context.abrupt(\"return\", {\n                  posts: data\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return Index;\n}(Component);\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/guill/git/nextjs/pages/index.js"],"names":["React","Component","axios","Index","props","console","log","posts","map","post","id","get","res","data"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAEMC,K;;;;;AACJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CACE,uEADF;AAFiB;AAKlB;;;;wCAEmB;AAClBD,MAAAA,OAAO,CAACC,GAAR,CAAY,yDAAZ;AACD,K,CAED;AACA;AACA;;;;6BAUS;AAAA;;AACPD,MAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACA,aACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,GAAjB,CAAqB,UAACC,IAAD,EAAU;AAC9B;AAAI,UAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,OAFA,CADH,CAFF,CADF;AAUD;;;;;;;;;;AApBCL,gBAAAA,OAAO,CAACC,GAAR,CACE,iGADF;;uBAGkBJ,KAAK,CAACS,GAAN,CAAU,4CAAV,C;;;AAAZC,gBAAAA,G;AACEC,gBAAAA,I,GAASD,G,CAATC,I;iDACD;AAAEN,kBAAAA,KAAK,EAAEM;AAAT,iB;;;;;;;;;;;;;;;;;;;EArBSZ,S;;AAuCpB,eAAeE,KAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass Index extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(\r\n      \"CONSTRUCTOR: Data fetching twice, from the server and from the client\"\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"COMPONENT_DID_MOUNT: Data fetching from the client only\");\r\n  }\r\n\r\n  // If we use a functional component, then we need to defined it like this:\r\n  // Page.getInitialProps = async () => { ... }\r\n  // Both functional and class components could recieve a \"ctx\" argument (context)\r\n  static async getInitialProps() {\r\n    console.log(\r\n      \"GET_INITIAL_PROPS: Data fetching from the server in the initial page load, then from the client\"\r\n    );\r\n    const res = await axios.get(\"https://jsonplaceholder.typicode.com/posts\");\r\n    const { data } = res;\r\n    return { posts: data };\r\n  }\r\n\r\n  render() {\r\n    console.log(\"**********RUNNING INDEX COMPONENT**********\");\r\n    return (\r\n      <>\r\n        <h1>Our Index Page</h1>\r\n        <ul>\r\n          {this.props.posts.map((post) => {\r\n            <li key={post.id}>post.title</li>;\r\n          })}\r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}
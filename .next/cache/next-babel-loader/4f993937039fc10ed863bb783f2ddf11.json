{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guill\\\\git\\\\nextjs\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass Index extends Component {\n  constructor(props) {\n    super(props);\n    console.log(\"CONSTRUCTOR: Data fetching twice, from the server and from the client\");\n  }\n\n  componentDidMount() {\n    console.log(\"COMPONENT_DID_MOUNT: Data fetching from the client only\");\n  } // If we use a functional component, then we need to defined it like this:\n  // Page.getInitialProps = async () => { ... }\n  // Both functional and class components could recieve a \"ctx\" argument (context)\n\n\n  static async getInitialProps() {\n    console.log(\"GET_INITIAL_PROPS: Data fetching from the server in the initial page load, then from the client\");\n    const res = await axios.get(\"https://jsonplaceholder.typicode.com/posts\");\n    const {\n      data\n    } = res;\n    return {\n      posts: data\n    };\n  }\n\n  render() {\n    console.log(\"**********RUNNING INDEX COMPONENT**********\");\n    return __jsx(React.Fragment, null, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, \"Our Index Page\"), __jsx(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, posts.map(post => {\n      __jsx(\"li\", {\n        key: post.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }\n      }, \"post.title\");\n    })));\n  }\n\n}\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/guill/git/nextjs/pages/index.js"],"names":["React","Component","axios","Index","constructor","props","console","log","componentDidMount","getInitialProps","res","get","data","posts","render","map","post","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAC5BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CACE,uEADF;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBF,IAAAA,OAAO,CAACC,GAAR,CAAY,yDAAZ;AACD,GAV2B,CAY5B;AACA;AACA;;;AACA,eAAaE,eAAb,GAA+B;AAC7BH,IAAAA,OAAO,CAACC,GAAR,CACE,iGADF;AAGA,UAAMG,GAAG,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAU,4CAAV,CAAlB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAWF,GAAjB;AACA,WAAO;AAAEG,MAAAA,KAAK,EAAED;AAAT,KAAP;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACPR,IAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACA,WACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGM,KAAK,CAACE,GAAN,CAAWC,IAAD,IAAU;AACnB;AAAI,QAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,KAFA,CADH,CAFF,CADF;AAUD;;AApC2B;;AAuC9B,eAAed,KAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass Index extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(\r\n      \"CONSTRUCTOR: Data fetching twice, from the server and from the client\"\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"COMPONENT_DID_MOUNT: Data fetching from the client only\");\r\n  }\r\n\r\n  // If we use a functional component, then we need to defined it like this:\r\n  // Page.getInitialProps = async () => { ... }\r\n  // Both functional and class components could recieve a \"ctx\" argument (context)\r\n  static async getInitialProps() {\r\n    console.log(\r\n      \"GET_INITIAL_PROPS: Data fetching from the server in the initial page load, then from the client\"\r\n    );\r\n    const res = await axios.get(\"https://jsonplaceholder.typicode.com/posts\");\r\n    const { data } = res;\r\n    return { posts: data };\r\n  }\r\n\r\n  render() {\r\n    console.log(\"**********RUNNING INDEX COMPONENT**********\");\r\n    return (\r\n      <>\r\n        <h1>Our Index Page</h1>\r\n        <ul>\r\n          {posts.map((post) => {\r\n            <li key={post.id}>post.title</li>;\r\n          })}\r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}
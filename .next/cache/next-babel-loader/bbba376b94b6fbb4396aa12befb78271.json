{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\guill\\\\git\\\\nextjs\\\\pages\\\\post.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from \"axios\";\n\nvar Post = function Post(props) {\n  return __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3,\n      columnNumber: 25\n    }\n  }, \"YOU ARE LOOKING AT POST #\", props.id);\n};\n\n_c = Post;\n\nPost.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var query, res, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref.query;\n            _context.next = 3;\n            return axios.get(\"https://jsonplaceholder.typicode.com/comments?postId=1\");\n\n          case 3:\n            res = _context.sent;\n            data = res.data;\n            console.log();\n            return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, query), {}, {\n              comments: data\n            }));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Post; // ###################### TWO WAYS TO FETCH THE QUERY ######################\n\n/*\r\n// ########## THE FIRST ONE ############\r\n// Using getInitialProps to fetch the query\r\nconst Post = (props) => <h1>YOU ARE LOOKING AT POST #{props.id}</h1>;\r\nPost.getInitialProps = async ({ query }) => {\r\n  return query;\r\n};\r\nexport default Post;\r\n*/\n\n/*\r\n// ########## THE OTHER ONE ############\r\n// The same, using a High Order Component called withRouter to fetch the query\r\nimport { withRouter } from \"next/router\";\r\nconst Post = (props) => <h1>YOU ARE LOOKING AT POST #{props.router.query.id}</h1>;\r\nexport default withRouter(Post);\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["C:/Users/guill/git/nextjs/pages/post.js"],"names":["axios","Post","props","id","getInitialProps","query","get","res","data","console","log","comments"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD;AAAA,SAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAA8BA,KAAK,CAACC,EAApC,CAAX;AAAA,CAAb;;KAAMF,I;;AAENA,IAAI,CAACG,eAAL;AAAA,uEAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,KAAT,QAASA,KAAT;AAAA;AAAA,mBACHL,KAAK,CAACM,GAAN,CAChB,wDADgB,CADG;;AAAA;AACfC,YAAAA,GADe;AAIbC,YAAAA,IAJa,GAIJD,GAJI,CAIbC,IAJa;AAKrBC,YAAAA,OAAO,CAACC,GAAR;AALqB,6EAMTL,KANS;AAMFM,cAAAA,QAAQ,EAAEH;AANR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AASA,eAAeP,IAAf,C,CAEA;;AAEA;;;;;;;;;;AAUA","sourcesContent":["import axios from \"axios\";\r\n\r\nconst Post = (props) => <h1>YOU ARE LOOKING AT POST #{props.id}</h1>;\r\n\r\nPost.getInitialProps = async ({ query }) => {\r\n  const res = await axios.get(\r\n    \"https://jsonplaceholder.typicode.com/comments?postId=1\"\r\n  );\r\n  const { data } = res;\r\n  console.log();\r\n  return { ...query, comments: data };\r\n};\r\n\r\nexport default Post;\r\n\r\n// ###################### TWO WAYS TO FETCH THE QUERY ######################\r\n\r\n/*\r\n// ########## THE FIRST ONE ############\r\n// Using getInitialProps to fetch the query\r\nconst Post = (props) => <h1>YOU ARE LOOKING AT POST #{props.id}</h1>;\r\nPost.getInitialProps = async ({ query }) => {\r\n  return query;\r\n};\r\nexport default Post;\r\n*/\r\n\r\n/*\r\n// ########## THE OTHER ONE ############\r\n// The same, using a High Order Component called withRouter to fetch the query\r\nimport { withRouter } from \"next/router\";\r\nconst Post = (props) => <h1>YOU ARE LOOKING AT POST #{props.router.query.id}</h1>;\r\nexport default withRouter(Post);\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}